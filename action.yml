name: 'SAFE Network Testnet deployer'
description: 'GitHub action to deploy a testnet using Digital Ocean droplets'
inputs:
  do-token:
    description: 'Digital Ocean Authorization token'
    required: true
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: true
  aws-access-key-secret:
    description: 'AWS Access Key'
    required: true
  aws-default-region:
    description: 'AWS Default region'
    default: eu-west-2
  ssh-secret-key:
    description: 'SSH key used to run the nodes on the Digital Ocean droplets'
    required: true
  node-count:
    description: 'Number of nodes to be deployed'
    default: 50
  node-path:
    description: 'Path to the node binary'
  node-version:
    description: 'Node version'
  build-node:
    description: "Does the node binary need to be built? Accepts 'true' or 'false'"
    required: false
    default: false
  action:
    description: "Task to be carried out. Accepts 'create' or 'destroy'"
    default: 'create'

runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    - name: Set TESTNET_ID env
      shell: bash
      run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV
    - name: Build node and run testnet on Digital Ocean
      if: inputs.action == 'create'
      env:
        DO_PAT: ${{ inputs.do-token }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-access-key-secret }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-default-region }}
        NODE_COUNT: ${{ inputs.node-count }}
        NODE_PATH: ${{ inputs.node-path }}
        NODE_VERSION: ${{ inputs.node-version }}
        WORKING_DIR: ${{ github.action_path }}
      shell: bash
      run: |
        repo_owner=${{ github.event.pull_request.head.user.login || github.repository_owner }}
        commit_hash=${{ github.event.pull_request.head.sha || github.sha }}
        git clone --single-branch --depth 1 \
          https://github.com/maidsafe/sn_testnet_tool $WORKING_DIR/sn_testnet_tool
        cd $WORKING_DIR/sn_testnet_tool
        terraform init
        terraform workspace select ${{ env.TESTNET_ID }} || terraform workspace new ${{ env.TESTNET_ID }}
        echo "${{ inputs.ssh-secret-key }}" > $WORKING_DIR/id_rsa
        chmod 600 $WORKING_DIR/id_rsa
        eval `ssh-agent`
        ssh-add $WORKING_DIR/id_rsa
        if [[ "${{inputs.build-node}}" == "true" ]]; then
          echo "Building node bins"
          $WORKING_DIR/sn_testnet_tool/build.sh $WORKING_DIR/id_rsa $repo_owner $commit_hash
          NODE_PATH=$WORKING_DIR/sn_node
        fi
        # The 0 value is to disable the client node, which doesn't apply in this context.
        ./up.sh \
          $WORKING_DIR/id_rsa "$NODE_COUNT" "$NODE_PATH" "$NODE_VERSION" "0" "-auto-approve"
    - uses: actions/upload-artifact@v2
      with:
        name: node_connection_info.config
        path: ${{ github.action_path }}/${{ env.TESTNET_ID }}-node_connection_info.config
    - name: Destroy Testnet
      if: inputs.action == 'destroy'
      env:
        DO_PAT: ${{ inputs.do-token }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-access-key-secret }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-default-region }}
        WORKING_DIR: ${{ github.action_path }}
      shell: bash
      run: |
        git clone https://github.com/maidsafe/sn_testnet_tool $WORKING_DIR/sn_testnet_tool --depth 1
        cd $WORKING_DIR/sn_testnet_tool
        terraform init
        terraform workspace select ${{ env.TESTNET_ID }} || terraform workspace new ${{ env.TESTNET_ID }}
        $WORKING_DIR/sn_testnet_tool/down.sh $WORKING_DIR/id_rsa "-auto-approve"
        terraform workspace select alpha
        terraform workspace delete ${{ env.TESTNET_ID }}

branding:
  icon: 'globe'
  color: 'blue'
